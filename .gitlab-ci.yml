image: docker:27.3

services:
  - docker:27.3-dind

variables:
  FRONTEND_IMAGE: web
  SERVER_IMAGE: server

stages:
  - test
  - build-dev
  - build-prod

before_script:
  - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY_IMAGE -u $CI_REGISTRY_USER --password-stdin

test:
  stage: test
  script:
    - echo "Running tests"

build-backend-dev:
  stage: build-dev
  rules:
    - if: $CI_COMMIT_BRANCH == 'dev'
  script:
    - export VERSION=$(docker run --rm -v "$PWD":/app:ro -w /app node:slim node -p "require('./backend/package.json').version")
    - docker build -t $CI_REGISTRY_IMAGE/$SERVER_IMAGE:$VERSION ./backend
    - docker push $CI_REGISTRY_IMAGE/$SERVER_IMAGE:$VERSION

build-frontend-dev:
  stage: build-dev
  rules:
    - if: $CI_COMMIT_BRANCH == 'dev'
  script:
    - export VERSION=$(docker run --rm -v "$PWD":/app:ro -w /app node:slim node -p "require('./frontend/package.json').version")
    - docker build -t $CI_REGISTRY_IMAGE/$FRONTEND_IMAGE:$VERSION ./frontend
    - docker push $CI_REGISTRY_IMAGE/$FRONTEND_IMAGE:$VERSION

build-crypto-pipeline-dev:
  stage: build-dev
  rules:
    - if: $CI_COMMIT_BRANCH == 'dev'
  script:
    - docker build -t $CI_REGISTRY_IMAGE/crypto-pipeline:dev ./crypto_pipeline
    - docker push $CI_REGISTRY_IMAGE/crypto-pipeline:dev

build-embedding-consumer-dev:
  stage: build-dev
  rules:
    - if: $CI_COMMIT_BRANCH == 'dev'
  script:
    - docker build -t $CI_REGISTRY_IMAGE/embedding-consumer:dev ./embedding_consumerr
    - docker push $CI_REGISTRY_IMAGE/embedding-consumer:dev

build-crypto-portfolio-consumer-dev:
  stage: build-dev
  rules:
    - if: $CI_COMMIT_BRANCH == 'dev'
  script:
    - docker build -t $CI_REGISTRY_IMAGE/crypto-portfolio-consumer:dev ./crypto_portfolio_consumer
    - docker push $CI_REGISTRY_IMAGE/crypto-portfolio-consumer:dev

build-ai-server-dev:
  stage: build-dev
  rules:
    - if: $CI_COMMIT_BRANCH == 'dev'
  script:
    - docker build -t $CI_REGISTRY_IMAGE/ai-server:dev ./ai_serverr
    - docker push $CI_REGISTRY_IMAGE/ai-server:dev

build-backend-prod:
  stage: build-prod
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
  script:
    - docker build -t $CI_REGISTRY_IMAGE/$SERVER_IMAGE:latest ./backend
    - docker push $CI_REGISTRY_IMAGE/$SERVER_IMAGE:latest

build-frontend-prod:
  stage: build-prod
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
  script:
    - docker build -t $CI_REGISTRY_IMAGE/$FRONTEND_IMAGE:latest ./frontend
    - docker push $CI_REGISTRY_IMAGE/$FRONTEND_IMAGE:latest

build-crypto-pipeline-prod:
  stage: build-prod
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
  script:
    - docker build -t $CI_REGISTRY_IMAGE/crypto-pipeline:latest ./crypto_pipeline
    - docker push $CI_REGISTRY_IMAGE/crypto-pipeline:latest

build-embedding-consumer-prod:
  stage: build-prod
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
  script:
    - docker build -t $CI_REGISTRY_IMAGE/embedding-consumer:latest ./embedding_consumerr
    - docker push $CI_REGISTRY_IMAGE/embedding-consumer:latest

build-crypto-portfolio-consumer-prod:
  stage: build-prod
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
  script:
    - docker build -t $CI_REGISTRY_IMAGE/crypto-portfolio-consumer:latest ./crypto_portfolio_consumer
    - docker push $CI_REGISTRY_IMAGE/crypto-portfolio-consumer:latest

build-ai-server-prod:
  stage: build-prod
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
  script:
    - docker build -t $CI_REGISTRY_IMAGE/ai-server:latest ./ai_serverr
    - docker push $CI_REGISTRY_IMAGE/ai-server:latest