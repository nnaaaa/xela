# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MonthlyTarget {
  id: String!
  categoryId: String!
  month: Int!
  year: Int!
  target: Float!
  category: ExpenseCategory!
}

type ExpenseCategory {
  id: String!
  userId: Int!
  name: String!
  description: String
  color: String!
  expenses: [Expense!]
  user: User!
  monthlyTargets(month: Int, year: Int): [MonthlyTarget!]
  countExpenses: Int!
  totalSpentAmounts(startDate: DateTime, endDate: DateTime): [TotalSpentAmountOutput!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Expense {
  id: String!
  userId: Int!
  categoryId: String!
  name: String!
  description: String
  amount: Float!
  bankTransactionId: String!
  createdAt: DateTime!
  bankTransaction: BankTransaction!
  category: ExpenseCategory!
  user: User!
  transaction: BankTransaction!
}

type BankTransaction {
  id: String!
  bankId: String!
  amount: Float!
  description: String!
  createdAt: DateTime!
  spentAmount: Float!
  bank: BankAccount!
  expense: [Expense!]
}

type HistoricalBankBalance {
  time: DateTime!
  balance: Float!
  bankAccountId: String!
  bankAccount: BankAccount!
}

type BankAccount {
  id: String!
  name: String!
  bankManagerId: String!
  accountName: String!
  accountNumber: String!
  balance: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  fullName: String!
  bankManager: BankManager!
  transactions: [BankTransaction!]!
  historicalBalances: [HistoricalBankBalance!]
}

type BankManager {
  id: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  apiKey: String!
  userId: Int!
  banks: [BankAccount!]!
  user: User!
}

type AssetPrice {
  assetInfoId: String!
  interval: String!
  open_time: DateTime!
  close_time: DateTime!
  openPrice: Float!
  closePrice: Float!
  highPrice: Float!
  lowPrice: Float!
  volume: Float!
  assetInfo: AssetInfo!
}

type HistoricalAssetProfit {
  time: DateTime!
  estimatedProfit: Float!
  totalCostInQuoteQty: Float!
  remainingQty: Float!
  assetInfoId: String!
  cryptoPortfolioId: String!
  assetInfo: AssetInfoOutput!
  cryptoPortfolio: CryptoPortfolio!
}

type AssetInfo {
  id: String!
  name: String!
  symbol: String!
  category: String!
  desc: String!
  logo: String!
  tag: String!
  assetBalances: [AssetBalance!]
  assetPrices: [AssetPrice!]
  historicalProfits: [HistoricalAssetProfit!]
}

type AssetBalance {
  id: String!
  assetInfoId: String!
  balance: Float!
  locked: Float!
  cryptoPortfolioId: String!
  assetInfo: AssetInfoOutput!
  cryptoPortfolio: CryptoPortfolio!
}

type HistoricalCryptoBalance {
  time: DateTime!
  estimatedBalance: Float!
  changePercent: Float!
  changeBalance: Float!
  cryptoPortfolioId: String!
  cryptoPortfolio: CryptoPortfolio!
}

type CryptoPortfolio {
  userId: Int!
  exchanges: CEXExchanges!
  tradingType: TradingType!
  apiKey: String!
  secretKey: String!
  updateTime: DateTime
  id: String!
  investmentCategoryName: String
  balances: [AssetBalance!]!
  user: User!
  historicalAssetProfits: [HistoricalAssetProfit!]
  historicalBalances: [HistoricalCryptoBalance!]
  latestHistoricalBalances(timeFrame: String!): HistoricalCryptoBalance!
  latestAssetProfits: [HistoricalAssetProfit!]!
}

enum CEXExchanges {
  BINANCE
  MEXC
}

enum TradingType {
  FUTURES
  SPOT
}

type User {
  id: Int!
  email: String!
  name: String
  password: String!
  otp: String
  otpPurpose: OtpPurpose
  bankManager: [BankManager!]
  cryptoPortfolios: [CryptoPortfolio!]
  expenses: [Expense!]
  expenseCategories: [ExpenseCategory!]
  cryptoProfiles: CryptoPortfolio!
}

enum OtpPurpose {
  VERIFY_ACCOUNT
  RESET_PASSWORD
}

type LoginResDto {
  accessToken: String!
  refreshToken: String!
}

type SignupResDto {
  accessToken: String!
  refreshToken: String!
}

type CreateCryptoRes {
  userId: Float!
}

type AssetInfoOutput {
  id: String!
  name: String!
  symbol: String!
  category: String!
  desc: String!
  logo: String!
  tag: String!
  historicalProfits: [HistoricalAssetProfit!]
  lastPrice: Float!
}

type TotalSpentAmountOutput {
  amount: Float!
  month: Float!
  year: Float!
}

type Query {
  getMe: User!
  getCryptoPortfolios(data: GetCryptoPortfolioInput!): [CryptoPortfolio!]!
  getAssetInfo(data: GetAssetInfoInput!): AssetInfo!
  getAssetPrices(data: GetAssetPriceInput!, pagination: PaginationInput!): [AssetPrice!]!
  getHistoricalBalances(data: GetHistoricalBalanceInput!, pagination: PaginationInput!): [HistoricalCryptoBalance!]!
  getHistoricalAssetProfits(data: GetHistoricalAssetProfitInput!, pagination: PaginationInput!): [HistoricalAssetProfit!]!
  getBankManagers(userId: Int!): [BankManager!]!
  getBankTransactions(userId: Float!): [BankTransaction!]!
  getExpenses(userId: Int!, startDate: DateTime, endDate: DateTime): [Expense!]!
  getExpenseCategories(userId: Int, name: String, startDate: DateTime, endDate: DateTime): [ExpenseCategory!]!
  getMonthlyTargets(categoryId: String!, month: Int, year: Int): [MonthlyTarget!]!
}

input GetCryptoPortfolioInput {
  userId: Int!
}

input GetAssetInfoInput {
  id: String!
}

input GetAssetPriceInput {
  assetInfoId: String!
  timeFrame: String!
}

input PaginationInput {
  take: Int!
  after: String
  before: String
}

input GetHistoricalBalanceInput {
  cryptoPortfolioId: String!
  timeFrame: String!
}

input GetHistoricalAssetProfitInput {
  assetInfoId: String!
  cryptoPortfolioId: String!
  timeFrame: String!
}

type Mutation {
  createCryptoPortfolio(data: CreateCryptoPortfolioInput!): CreateCryptoRes!
  login(data: LoginReqDto!): LoginResDto!
  signup(data: CreateUserInput!): SignupResDto!
  verifyAccount(data: VerifyDto!): LoginResDto!
  createBank(data: CreateBankManagerInput!): BankManager!
  createExpense(data: CreateExpenseInput!): Expense!
  updateExpense(id: String!, data: UpdateExpenseInput!): Expense!
  removeExpense(id: String!): Expense!
  removeExpenses(ids: [String!]!): Int!
  createExpenseCategory(data: CreateExpenseCategoryInput!): ExpenseCategory!
  updateExpenseCategory(id: String!, data: UpdateExpenseCategoryInput!): ExpenseCategory!
  removeExpenseCategory(id: String!): ExpenseCategory!
  createMonthlyTarget(data: CreateMonthlyTargetInput!): MonthlyTarget!
  updateMonthlyTarget(id: String!, data: UpdateMonthlyTargetInput!): MonthlyTarget!
}

input CreateCryptoPortfolioInput {
  userId: Int!
  exchanges: CEXExchanges! = BINANCE
  apiKey: String!
  secretKey: String!
}

input LoginReqDto {
  email: String!
  password: String!
}

input CreateUserInput {
  email: String!
  name: String
  password: String!
  otp: String
  otpPurpose: OtpPurpose
}

input VerifyDto {
  otp: String!
  otpPurpose: OtpPurpose!
}

input CreateBankManagerInput {
  name: String!
  userId: Int!
  apiKey: String!
}

input CreateExpenseInput {
  userId: Int!
  categoryId: String!
  name: String!
  description: String
  amount: Float!
  bankTransactionId: String!
  createdAt: DateTime!
}

input UpdateExpenseInput {
  categoryId: String
  name: String
  description: String
  amount: Float
  bankTransactionId: String
  createdAt: DateTime
}

input CreateExpenseCategoryInput {
  userId: Int!
  name: String!
  description: String
  color: String!
}

input UpdateExpenseCategoryInput {
  name: String
  description: String
  color: String
}

input CreateMonthlyTargetInput {
  categoryId: String!
  month: Int!
  year: Int!
  target: Float!
}

input UpdateMonthlyTargetInput {
  month: Int
  year: Int
  target: Float
}

type Subscription {
  portfolioCreated(data: GetCryptoPortfolioInput!): CryptoPortfolio!
  newAssetPrice1m(data: GetAssetPriceInput!): AssetPrice!
  newAssetPrice5m(data: GetAssetPriceInput!): AssetPrice!
  newHistoricalCryptoBalance1m(data: GetHistoricalBalancesInput!): HistoricalCryptoBalance!
  newHistoricalCryptoBalance1h(data: GetHistoricalBalancesInput!): HistoricalCryptoBalance!
  newHistoricalAssetProfit1m(data: GetHistoricalAssetProfitInput!): HistoricalAssetProfit!
  newHistoricalAssetProfit1h(data: GetHistoricalAssetProfitInput!): HistoricalAssetProfit!
}

input GetHistoricalBalancesInput {
  timeFrame: String!
  cryptoPortfolioIds: [String!]!
}