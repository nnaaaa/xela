//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Table BankManager {
  id String [pk]
  name String [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  apiKey String [not null]
  userId Int [not null]
  banks BankAccount [not null]
  user User [not null]
}

Table BankAccount {
  id String [pk]
  name String [not null]
  bankManagerId String [not null]
  accountName String [not null]
  accountNumber String [not null]
  balance Float [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  fullName String [not null]
  bankManager BankManager [not null]
  transactions BankTransaction [not null]
  historicalBalances HistoricalBankBalance [not null]
}

Table HistoricalBankBalance {
  time DateTime [not null]
  balance Float [not null]
  bankAccountId String [not null]
  bankAccount BankAccount [not null]

  indexes {
    (bankAccountId, time) [unique]
  }
}

Table BankTransaction {
  id String [pk]
  bankId String [not null]
  amount Float [not null]
  description String [not null]
  createdAt DateTime [default: `now()`, not null]
  spentAmount Float [not null, default: 0]
  bank BankAccount [not null]
  expense Expense [not null]
}

Table CryptoPortfolio {
  userId Int [not null]
  name String [not null, default: '']
  status PortfolioStatus [not null, default: 'ACTIVE']
  exchanges CEXExchanges [not null, default: 'BINANCE']
  tradingType TradingType [not null]
  apiKey String [not null]
  secretKey String [not null]
  updateTime DateTime
  id String [pk]
  investmentCategoryName String
  balances AssetBalance [not null]
  user User [not null]
  historicalAssetProfits HistoricalAssetProfit [not null]
  historicalBalances HistoricalCryptoBalance [not null]
  trades Trade [not null]
  parentPortfolioId String
  parentPortfolio CryptoPortfolio
  childPortfolios CryptoPortfolio [not null]
}

Table OKXCryptoPortfolio {
  id String [pk]
  cryptoPortfolioId String [unique, not null]
  passphrase String [not null]
}

Table CreatePortfolioExecution {
  id Int [pk, increment]
  time DateTime [default: `now()`]
  userId Int [not null]
  status CreateExecutionStatus [not null, default: 'QUEUE']
}

Table CreatePortfolioExecution {
  id Int [pk, increment]
  time DateTime [default: `now()`]
  userId Int [not null]
  status CreateExecutionStatus [not null, default: 'QUEUE']
}

Table AssetBalance {
  id String [pk]
  assetInfoId String [not null]
  balance Float [not null]
  locked Float [not null]
  cryptoPortfolioId String [not null]
  assetInfo AssetInfo [not null]
  cryptoPortfolio CryptoPortfolio [not null]
}

Table Trade {
  cryptoPortfolioId String [not null]
  assetInfoId String [not null]
  price Float [not null]
  qty Float [not null]
  quoteQty Float [not null]
  commission Float [not null]
  commissionAsset String [not null]
  time DateTime [not null]
  isBuyer Boolean [not null]
  cryptoPortfolio CryptoPortfolio [not null]
  assetInfo AssetInfo [not null]

  indexes {
    (cryptoPortfolioId, assetInfoId, price, qty, time) [unique]
  }
}

Table AssetInfo {
  id String [pk]
  name String [not null]
  symbol String [not null]
  category String [not null]
  desc String [not null]
  logo String [not null]
  tag String [not null, default: '']
  assetBalances AssetBalance [not null]
  assetPrices AssetPrice [not null]
  historicalProfits HistoricalAssetProfit [not null]
  trades Trade [not null]
}

Table AssetPrice {
  assetInfoId String [not null]
  interval String [not null]
  open_time DateTime [not null]
  close_time DateTime [not null]
  openPrice Float [not null]
  closePrice Float [not null]
  highPrice Float [not null]
  lowPrice Float [not null]
  volume Float [not null]
  assetInfo AssetInfo [not null]

  indexes {
    (assetInfoId, open_time) [unique]
  }
}

Table HistoricalCryptoBalance {
  time DateTime [not null]
  estimatedBalance Float [not null]
  changePercent Float [not null]
  changeBalance Float [not null]
  cryptoPortfolioId String [not null]
  cryptoPortfolio CryptoPortfolio [not null]

  indexes {
    (cryptoPortfolioId, time) [unique]
  }
}

Table HistoricalAssetProfit {
  time DateTime [not null]
  estimatedProfit Float [not null]
  totalCostInQuoteQty Float [not null]
  remainingQty Float [not null]
  assetInfoId String [not null]
  cryptoPortfolioId String [not null]
  assetInfo AssetInfo [not null]
  cryptoPortfolio CryptoPortfolio [not null]

  indexes {
    (cryptoPortfolioId, assetInfoId, time) [unique]
  }
}

Table ExpenseCategory {
  id String [pk]
  userId Int [not null]
  name String [not null]
  description String
  color String [not null]
  expenses Expense [not null]
  user User [not null]
  monthlyTargets MonthlyTarget [not null]
}

Table MonthlyTarget {
  id String [pk]
  categoryId String [not null]
  month Int [not null]
  year Int [not null]
  target Float [not null]
  category ExpenseCategory [not null]
}

Table Expense {
  id String [pk]
  userId Int [not null]
  categoryId String [not null]
  name String [not null]
  description String
  amount Float [not null]
  bankTransactionId String [not null]
  createdAt DateTime [default: `now()`, not null]
  bankTransaction BankTransaction [not null]
  category ExpenseCategory [not null]
  user User [not null]
}

Table User {
  id Int [pk, increment]
  email String [unique, not null]
  name String
  password String [not null]
  otp String
  otpPurpose OtpPurpose
  bankManager BankManager [not null]
  cryptoPortfolios CryptoPortfolio [not null]
  expenses Expense [not null]
  expenseCategories ExpenseCategory [not null]
}

Table asset_price_5m {
  open_time DateTime [not null]
  assetInfoId String [not null]
  openPrice Float
  closePrice Float
  highPrice Float
  lowPrice Float
  volume Float

  indexes {
    (assetInfoId, open_time) [unique]
  }
}

Table asset_price_1h {
  open_time DateTime [not null]
  assetInfoId String [not null]
  openPrice Float
  closePrice Float
  highPrice Float
  lowPrice Float
  volume Float

  indexes {
    (assetInfoId, open_time) [unique]
  }
}

Table asset_price_1d {
  open_time DateTime [not null]
  assetInfoId String [not null]
  openPrice Float
  closePrice Float
  highPrice Float
  lowPrice Float
  volume Float

  indexes {
    (assetInfoId, open_time) [unique]
  }
}

Table asset_price_1M {
  open_time DateTime [not null]
  assetInfoId String [not null]
  openPrice Float
  closePrice Float
  highPrice Float
  lowPrice Float
  volume Float

  indexes {
    (assetInfoId, open_time) [unique]
  }
}

Table historical_crypto_balance_1h {
  time DateTime [not null]
  estimatedBalance Float
  changeBalance Float
  changePercent Float
  cryptoPortfolioId String [not null]

  indexes {
    (cryptoPortfolioId, time) [unique]
  }
}

Table historical_crypto_balance_1d {
  time DateTime [not null]
  estimatedBalance Float
  changeBalance Float
  changePercent Float
  cryptoPortfolioId String [not null]

  indexes {
    (cryptoPortfolioId, time) [unique]
  }
}

Table historical_asset_profit_5m {
  time DateTime [not null]
  assetInfoId String [not null]
  cryptoPortfolioId String [not null]
  estimatedProfit Float
  totalCostInQuoteQty Float
  remainingQty Float

  indexes {
    (cryptoPortfolioId, assetInfoId, time) [unique]
  }
}

Table historical_asset_profit_1h {
  time DateTime [not null]
  assetInfoId String [not null]
  cryptoPortfolioId String [not null]
  estimatedProfit Float
  totalCostInQuoteQty Float
  remainingQty Float

  indexes {
    (cryptoPortfolioId, assetInfoId, time) [unique]
  }
}

Table historical_asset_profit_1d {
  time DateTime [not null]
  assetInfoId String [not null]
  cryptoPortfolioId String [not null]
  estimatedProfit Float
  totalCostInQuoteQty Float
  remainingQty Float

  indexes {
    (cryptoPortfolioId, assetInfoId, time) [unique]
  }
}

Enum PortfolioStatus {
  ACTIVE
  INACTIVE
}

Enum CreateExecutionStatus {
  QUEUE
  PROCESSING
  FAILED
  SUCCESS
}

Enum TradingType {
  FUTURES
  SPOT
}

Enum CEXExchanges {
  BINANCE
  MEXC
  OKX
  ALL
}

Enum OtpPurpose {
  VERIFY_ACCOUNT
  RESET_PASSWORD
}

Ref: BankManager.userId > User.id

Ref: BankAccount.bankManagerId > BankManager.id

Ref: HistoricalBankBalance.bankAccountId > BankAccount.id

Ref: BankTransaction.bankId > BankAccount.id

Ref: CryptoPortfolio.userId > User.id

Ref: CryptoPortfolio.parentPortfolioId - CryptoPortfolio.id

Ref: AssetBalance.assetInfoId > AssetInfo.id

Ref: AssetBalance.cryptoPortfolioId > CryptoPortfolio.id

Ref: Trade.cryptoPortfolioId > CryptoPortfolio.id

Ref: Trade.assetInfoId > AssetInfo.id

Ref: AssetPrice.assetInfoId > AssetInfo.id

Ref: HistoricalCryptoBalance.cryptoPortfolioId > CryptoPortfolio.id

Ref: HistoricalAssetProfit.assetInfoId > AssetInfo.id

Ref: HistoricalAssetProfit.cryptoPortfolioId > CryptoPortfolio.id

Ref: ExpenseCategory.userId > User.id

Ref: MonthlyTarget.categoryId > ExpenseCategory.id

Ref: Expense.bankTransactionId > BankTransaction.id

Ref: Expense.categoryId > ExpenseCategory.id

Ref: Expense.userId > User.id