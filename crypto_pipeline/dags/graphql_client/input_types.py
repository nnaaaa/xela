# Generated by ariadne-codegen
# Source: ./gql/schema.gql

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import OtpPurpose, QueryMode, TradingType


class GetCryptoProfileInput(BaseModel):
    user_id: int = Field(alias="userId")


class CreateCryptoProfileInput(BaseModel):
    user_id: int = Field(alias="userId")
    api_key: str = Field(alias="apiKey")
    secret_key: str = Field(alias="secretKey")


class LoginReqDto(BaseModel):
    email: str
    password: str


class UserCreateInput(BaseModel):
    email: str
    name: Optional[str] = None
    password: str
    otp: Optional[str] = None
    otp_purpose: Optional[OtpPurpose] = Field(alias="otpPurpose", default=None)
    crypto_profiles: Optional["UserCryptoProfileCreateNestedManyWithoutUserInput"] = (
        Field(alias="cryptoProfiles", default=None)
    )


class UserCryptoProfileCreateNestedManyWithoutUserInput(BaseModel):
    create: Optional[List["UserCryptoProfileCreateWithoutUserInput"]] = None
    connect_or_create: Optional[
        List["UserCryptoProfileCreateOrConnectWithoutUserInput"]
    ] = Field(alias="connectOrCreate", default=None)
    create_many: Optional["UserCryptoProfileCreateManyUserInputEnvelope"] = Field(
        alias="createMany", default=None
    )
    connect: Optional[List["UserCryptoProfileWhereUniqueInput"]] = None


class UserCryptoProfileCreateWithoutUserInput(BaseModel):
    profile_id: Optional[str] = Field(alias="profileId", default=None)
    exchanges: Optional[str] = None
    trading_type: TradingType = Field(alias="tradingType")
    api_key: str = Field(alias="apiKey")
    secret_key: str = Field(alias="secretKey")
    balances: Optional["AssetBalanceCreateNestedManyWithoutCryptoProfileInput"] = None
    historical_balances: Optional[
        "HistoricalCryptoBalanceCreateNestedManyWithoutCryptoProfileInput"
    ] = Field(alias="historicalBalances", default=None)


class AssetBalanceCreateNestedManyWithoutCryptoProfileInput(BaseModel):
    create: Optional[List["AssetBalanceCreateWithoutCryptoProfileInput"]] = None
    connect_or_create: Optional[
        List["AssetBalanceCreateOrConnectWithoutCryptoProfileInput"]
    ] = Field(alias="connectOrCreate", default=None)
    create_many: Optional["AssetBalanceCreateManyCryptoProfileInputEnvelope"] = Field(
        alias="createMany", default=None
    )
    connect: Optional[List["AssetBalanceWhereUniqueInput"]] = None


class AssetBalanceCreateWithoutCryptoProfileInput(BaseModel):
    id: Optional[str] = None
    balance: float
    locked: float
    asset_info: "AssetInfoCreateNestedOneWithoutAsssetBalancesInput" = Field(
        alias="assetInfo"
    )


class AssetInfoCreateNestedOneWithoutAsssetBalancesInput(BaseModel):
    create: Optional["AssetInfoCreateWithoutAsssetBalancesInput"] = None
    connect_or_create: Optional[
        "AssetInfoCreateOrConnectWithoutAsssetBalancesInput"
    ] = Field(alias="connectOrCreate", default=None)
    connect: Optional["AssetInfoWhereUniqueInput"] = None


class AssetInfoCreateWithoutAsssetBalancesInput(BaseModel):
    id: Optional[str] = None
    name: str
    symbol: str
    category: str
    desc: str
    logo: str
    asset_prices: Optional["AssetPriceCreateNestedManyWithoutAssetInfoInput"] = Field(
        alias="assetPrices", default=None
    )


class AssetPriceCreateNestedManyWithoutAssetInfoInput(BaseModel):
    create: Optional[List["AssetPriceCreateWithoutAssetInfoInput"]] = None
    connect_or_create: Optional[
        List["AssetPriceCreateOrConnectWithoutAssetInfoInput"]
    ] = Field(alias="connectOrCreate", default=None)
    create_many: Optional["AssetPriceCreateManyAssetInfoInputEnvelope"] = Field(
        alias="createMany", default=None
    )
    connect: Optional[List["AssetPriceWhereUniqueInput"]] = None


class AssetPriceCreateWithoutAssetInfoInput(BaseModel):
    interval: str
    open_time: Any
    close_time: Any
    open_price: float = Field(alias="openPrice")
    close_price: float = Field(alias="closePrice")
    high_price: float = Field(alias="highPrice")
    low_price: float = Field(alias="lowPrice")
    volume: float


class AssetPriceCreateOrConnectWithoutAssetInfoInput(BaseModel):
    where: "AssetPriceWhereUniqueInput"
    create: "AssetPriceCreateWithoutAssetInfoInput"


class AssetPriceWhereUniqueInput(BaseModel):
    asset_info_id_open_time: Optional[
        "AssetPriceAssetInfoIdOpen_timeCompoundUniqueInput"
    ] = Field(alias="assetInfoId_open_time", default=None)
    and_: Optional[List["AssetPriceWhereInput"]] = Field(alias="AND", default=None)
    or_: Optional[List["AssetPriceWhereInput"]] = Field(alias="OR", default=None)
    not_: Optional[List["AssetPriceWhereInput"]] = Field(alias="NOT", default=None)
    asset_info_id: Optional["StringFilter"] = Field(alias="assetInfoId", default=None)
    interval: Optional["StringFilter"] = None
    open_time: Optional["DateTimeFilter"] = None
    close_time: Optional["DateTimeFilter"] = None
    open_price: Optional["FloatFilter"] = Field(alias="openPrice", default=None)
    close_price: Optional["FloatFilter"] = Field(alias="closePrice", default=None)
    high_price: Optional["FloatFilter"] = Field(alias="highPrice", default=None)
    low_price: Optional["FloatFilter"] = Field(alias="lowPrice", default=None)
    volume: Optional["FloatFilter"] = None
    asset_info: Optional["AssetInfoRelationFilter"] = Field(
        alias="assetInfo", default=None
    )


class AssetPriceAssetInfoIdOpen_timeCompoundUniqueInput(BaseModel):
    asset_info_id: str = Field(alias="assetInfoId")
    open_time: Any


class AssetPriceWhereInput(BaseModel):
    and_: Optional[List["AssetPriceWhereInput"]] = Field(alias="AND", default=None)
    or_: Optional[List["AssetPriceWhereInput"]] = Field(alias="OR", default=None)
    not_: Optional[List["AssetPriceWhereInput"]] = Field(alias="NOT", default=None)
    asset_info_id: Optional["StringFilter"] = Field(alias="assetInfoId", default=None)
    interval: Optional["StringFilter"] = None
    open_time: Optional["DateTimeFilter"] = None
    close_time: Optional["DateTimeFilter"] = None
    open_price: Optional["FloatFilter"] = Field(alias="openPrice", default=None)
    close_price: Optional["FloatFilter"] = Field(alias="closePrice", default=None)
    high_price: Optional["FloatFilter"] = Field(alias="highPrice", default=None)
    low_price: Optional["FloatFilter"] = Field(alias="lowPrice", default=None)
    volume: Optional["FloatFilter"] = None
    asset_info: Optional["AssetInfoRelationFilter"] = Field(
        alias="assetInfo", default=None
    )


class StringFilter(BaseModel):
    equals: Optional[str] = None
    in_: Optional[List[str]] = Field(alias="in", default=None)
    not_in: Optional[List[str]] = Field(alias="notIn", default=None)
    lt: Optional[str] = None
    lte: Optional[str] = None
    gt: Optional[str] = None
    gte: Optional[str] = None
    contains: Optional[str] = None
    starts_with: Optional[str] = Field(alias="startsWith", default=None)
    ends_with: Optional[str] = Field(alias="endsWith", default=None)
    mode: Optional[QueryMode] = None
    not_: Optional["NestedStringFilter"] = Field(alias="not", default=None)


class NestedStringFilter(BaseModel):
    equals: Optional[str] = None
    in_: Optional[List[str]] = Field(alias="in", default=None)
    not_in: Optional[List[str]] = Field(alias="notIn", default=None)
    lt: Optional[str] = None
    lte: Optional[str] = None
    gt: Optional[str] = None
    gte: Optional[str] = None
    contains: Optional[str] = None
    starts_with: Optional[str] = Field(alias="startsWith", default=None)
    ends_with: Optional[str] = Field(alias="endsWith", default=None)
    not_: Optional["NestedStringFilter"] = Field(alias="not", default=None)


class DateTimeFilter(BaseModel):
    equals: Optional[Any] = None
    in_: Optional[List[Any]] = Field(alias="in", default=None)
    not_in: Optional[List[Any]] = Field(alias="notIn", default=None)
    lt: Optional[Any] = None
    lte: Optional[Any] = None
    gt: Optional[Any] = None
    gte: Optional[Any] = None
    not_: Optional["NestedDateTimeFilter"] = Field(alias="not", default=None)


class NestedDateTimeFilter(BaseModel):
    equals: Optional[Any] = None
    in_: Optional[List[Any]] = Field(alias="in", default=None)
    not_in: Optional[List[Any]] = Field(alias="notIn", default=None)
    lt: Optional[Any] = None
    lte: Optional[Any] = None
    gt: Optional[Any] = None
    gte: Optional[Any] = None
    not_: Optional["NestedDateTimeFilter"] = Field(alias="not", default=None)


class FloatFilter(BaseModel):
    equals: Optional[float] = None
    in_: Optional[List[float]] = Field(alias="in", default=None)
    not_in: Optional[List[float]] = Field(alias="notIn", default=None)
    lt: Optional[float] = None
    lte: Optional[float] = None
    gt: Optional[float] = None
    gte: Optional[float] = None
    not_: Optional["NestedFloatFilter"] = Field(alias="not", default=None)


class NestedFloatFilter(BaseModel):
    equals: Optional[float] = None
    in_: Optional[List[float]] = Field(alias="in", default=None)
    not_in: Optional[List[float]] = Field(alias="notIn", default=None)
    lt: Optional[float] = None
    lte: Optional[float] = None
    gt: Optional[float] = None
    gte: Optional[float] = None
    not_: Optional["NestedFloatFilter"] = Field(alias="not", default=None)


class AssetInfoRelationFilter(BaseModel):
    is_: Optional["AssetInfoWhereInput"] = Field(alias="is", default=None)
    is_not: Optional["AssetInfoWhereInput"] = Field(alias="isNot", default=None)


class AssetInfoWhereInput(BaseModel):
    and_: Optional[List["AssetInfoWhereInput"]] = Field(alias="AND", default=None)
    or_: Optional[List["AssetInfoWhereInput"]] = Field(alias="OR", default=None)
    not_: Optional[List["AssetInfoWhereInput"]] = Field(alias="NOT", default=None)
    id: Optional["StringFilter"] = None
    name: Optional["StringFilter"] = None
    symbol: Optional["StringFilter"] = None
    category: Optional["StringFilter"] = None
    desc: Optional["StringFilter"] = None
    logo: Optional["StringFilter"] = None
    asset_prices: Optional["AssetPriceListRelationFilter"] = Field(
        alias="assetPrices", default=None
    )
    assset_balances: Optional["AssetBalanceListRelationFilter"] = Field(
        alias="asssetBalances", default=None
    )


class AssetPriceListRelationFilter(BaseModel):
    every: Optional["AssetPriceWhereInput"] = None
    some: Optional["AssetPriceWhereInput"] = None
    none: Optional["AssetPriceWhereInput"] = None


class AssetBalanceListRelationFilter(BaseModel):
    every: Optional["AssetBalanceWhereInput"] = None
    some: Optional["AssetBalanceWhereInput"] = None
    none: Optional["AssetBalanceWhereInput"] = None


class AssetBalanceWhereInput(BaseModel):
    and_: Optional[List["AssetBalanceWhereInput"]] = Field(alias="AND", default=None)
    or_: Optional[List["AssetBalanceWhereInput"]] = Field(alias="OR", default=None)
    not_: Optional[List["AssetBalanceWhereInput"]] = Field(alias="NOT", default=None)
    id: Optional["StringFilter"] = None
    crypto_profile_id: Optional["StringFilter"] = Field(
        alias="cryptoProfileId", default=None
    )
    asset_info_id: Optional["StringFilter"] = Field(alias="assetInfoId", default=None)
    balance: Optional["FloatFilter"] = None
    locked: Optional["FloatFilter"] = None
    crypto_profile: Optional["UserCryptoProfileRelationFilter"] = Field(
        alias="cryptoProfile", default=None
    )
    asset_info: Optional["AssetInfoRelationFilter"] = Field(
        alias="assetInfo", default=None
    )


class UserCryptoProfileRelationFilter(BaseModel):
    is_: Optional["UserCryptoProfileWhereInput"] = Field(alias="is", default=None)
    is_not: Optional["UserCryptoProfileWhereInput"] = Field(alias="isNot", default=None)


class UserCryptoProfileWhereInput(BaseModel):
    and_: Optional[List["UserCryptoProfileWhereInput"]] = Field(
        alias="AND", default=None
    )
    or_: Optional[List["UserCryptoProfileWhereInput"]] = Field(alias="OR", default=None)
    not_: Optional[List["UserCryptoProfileWhereInput"]] = Field(
        alias="NOT", default=None
    )
    profile_id: Optional["StringFilter"] = Field(alias="profileId", default=None)
    user_id: Optional["IntFilter"] = Field(alias="userId", default=None)
    exchanges: Optional["StringFilter"] = None
    trading_type: Optional["EnumTradingTypeFilter"] = Field(
        alias="tradingType", default=None
    )
    api_key: Optional["StringFilter"] = Field(alias="apiKey", default=None)
    secret_key: Optional["StringFilter"] = Field(alias="secretKey", default=None)
    user: Optional["UserRelationFilter"] = None
    balances: Optional["AssetBalanceListRelationFilter"] = None
    historical_balances: Optional["HistoricalCryptoBalanceListRelationFilter"] = Field(
        alias="historicalBalances", default=None
    )


class IntFilter(BaseModel):
    equals: Optional[int] = None
    in_: Optional[List[int]] = Field(alias="in", default=None)
    not_in: Optional[List[int]] = Field(alias="notIn", default=None)
    lt: Optional[int] = None
    lte: Optional[int] = None
    gt: Optional[int] = None
    gte: Optional[int] = None
    not_: Optional["NestedIntFilter"] = Field(alias="not", default=None)


class NestedIntFilter(BaseModel):
    equals: Optional[int] = None
    in_: Optional[List[int]] = Field(alias="in", default=None)
    not_in: Optional[List[int]] = Field(alias="notIn", default=None)
    lt: Optional[int] = None
    lte: Optional[int] = None
    gt: Optional[int] = None
    gte: Optional[int] = None
    not_: Optional["NestedIntFilter"] = Field(alias="not", default=None)


class EnumTradingTypeFilter(BaseModel):
    equals: Optional[TradingType] = None
    in_: Optional[List[TradingType]] = Field(alias="in", default=None)
    not_in: Optional[List[TradingType]] = Field(alias="notIn", default=None)
    not_: Optional["NestedEnumTradingTypeFilter"] = Field(alias="not", default=None)


class NestedEnumTradingTypeFilter(BaseModel):
    equals: Optional[TradingType] = None
    in_: Optional[List[TradingType]] = Field(alias="in", default=None)
    not_in: Optional[List[TradingType]] = Field(alias="notIn", default=None)
    not_: Optional["NestedEnumTradingTypeFilter"] = Field(alias="not", default=None)


class UserRelationFilter(BaseModel):
    is_: Optional["UserWhereInput"] = Field(alias="is", default=None)
    is_not: Optional["UserWhereInput"] = Field(alias="isNot", default=None)


class UserWhereInput(BaseModel):
    and_: Optional[List["UserWhereInput"]] = Field(alias="AND", default=None)
    or_: Optional[List["UserWhereInput"]] = Field(alias="OR", default=None)
    not_: Optional[List["UserWhereInput"]] = Field(alias="NOT", default=None)
    id: Optional["IntFilter"] = None
    email: Optional["StringFilter"] = None
    name: Optional["StringNullableFilter"] = None
    password: Optional["StringFilter"] = None
    otp: Optional["StringNullableFilter"] = None
    otp_purpose: Optional["EnumOtpPurposeNullableFilter"] = Field(
        alias="otpPurpose", default=None
    )
    crypto_profiles: Optional["UserCryptoProfileListRelationFilter"] = Field(
        alias="cryptoProfiles", default=None
    )


class StringNullableFilter(BaseModel):
    equals: Optional[str] = None
    in_: Optional[List[str]] = Field(alias="in", default=None)
    not_in: Optional[List[str]] = Field(alias="notIn", default=None)
    lt: Optional[str] = None
    lte: Optional[str] = None
    gt: Optional[str] = None
    gte: Optional[str] = None
    contains: Optional[str] = None
    starts_with: Optional[str] = Field(alias="startsWith", default=None)
    ends_with: Optional[str] = Field(alias="endsWith", default=None)
    mode: Optional[QueryMode] = None
    not_: Optional["NestedStringNullableFilter"] = Field(alias="not", default=None)


class NestedStringNullableFilter(BaseModel):
    equals: Optional[str] = None
    in_: Optional[List[str]] = Field(alias="in", default=None)
    not_in: Optional[List[str]] = Field(alias="notIn", default=None)
    lt: Optional[str] = None
    lte: Optional[str] = None
    gt: Optional[str] = None
    gte: Optional[str] = None
    contains: Optional[str] = None
    starts_with: Optional[str] = Field(alias="startsWith", default=None)
    ends_with: Optional[str] = Field(alias="endsWith", default=None)
    not_: Optional["NestedStringNullableFilter"] = Field(alias="not", default=None)


class EnumOtpPurposeNullableFilter(BaseModel):
    equals: Optional[OtpPurpose] = None
    in_: Optional[List[OtpPurpose]] = Field(alias="in", default=None)
    not_in: Optional[List[OtpPurpose]] = Field(alias="notIn", default=None)
    not_: Optional["NestedEnumOtpPurposeNullableFilter"] = Field(
        alias="not", default=None
    )


class NestedEnumOtpPurposeNullableFilter(BaseModel):
    equals: Optional[OtpPurpose] = None
    in_: Optional[List[OtpPurpose]] = Field(alias="in", default=None)
    not_in: Optional[List[OtpPurpose]] = Field(alias="notIn", default=None)
    not_: Optional["NestedEnumOtpPurposeNullableFilter"] = Field(
        alias="not", default=None
    )


class UserCryptoProfileListRelationFilter(BaseModel):
    every: Optional["UserCryptoProfileWhereInput"] = None
    some: Optional["UserCryptoProfileWhereInput"] = None
    none: Optional["UserCryptoProfileWhereInput"] = None


class HistoricalCryptoBalanceListRelationFilter(BaseModel):
    every: Optional["HistoricalCryptoBalanceWhereInput"] = None
    some: Optional["HistoricalCryptoBalanceWhereInput"] = None
    none: Optional["HistoricalCryptoBalanceWhereInput"] = None


class HistoricalCryptoBalanceWhereInput(BaseModel):
    and_: Optional[List["HistoricalCryptoBalanceWhereInput"]] = Field(
        alias="AND", default=None
    )
    or_: Optional[List["HistoricalCryptoBalanceWhereInput"]] = Field(
        alias="OR", default=None
    )
    not_: Optional[List["HistoricalCryptoBalanceWhereInput"]] = Field(
        alias="NOT", default=None
    )
    crypto_profile_id: Optional["StringFilter"] = Field(
        alias="cryptoProfileId", default=None
    )
    time: Optional["DateTimeFilter"] = None
    estimated_balance: Optional["FloatFilter"] = Field(
        alias="estimatedBalance", default=None
    )
    change_percent: Optional["FloatFilter"] = Field(alias="changePercent", default=None)
    change_balance: Optional["FloatFilter"] = Field(alias="changeBalance", default=None)
    crypto_profile: Optional["UserCryptoProfileRelationFilter"] = Field(
        alias="cryptoProfile", default=None
    )


class AssetPriceCreateManyAssetInfoInputEnvelope(BaseModel):
    data: List["AssetPriceCreateManyAssetInfoInput"]
    skip_duplicates: Optional[bool] = Field(alias="skipDuplicates", default=None)


class AssetPriceCreateManyAssetInfoInput(BaseModel):
    interval: str
    open_time: Any
    close_time: Any
    open_price: float = Field(alias="openPrice")
    close_price: float = Field(alias="closePrice")
    high_price: float = Field(alias="highPrice")
    low_price: float = Field(alias="lowPrice")
    volume: float


class AssetInfoCreateOrConnectWithoutAsssetBalancesInput(BaseModel):
    where: "AssetInfoWhereUniqueInput"
    create: "AssetInfoCreateWithoutAsssetBalancesInput"


class AssetInfoWhereUniqueInput(BaseModel):
    id: Optional[str] = None
    and_: Optional[List["AssetInfoWhereInput"]] = Field(alias="AND", default=None)
    or_: Optional[List["AssetInfoWhereInput"]] = Field(alias="OR", default=None)
    not_: Optional[List["AssetInfoWhereInput"]] = Field(alias="NOT", default=None)
    name: Optional["StringFilter"] = None
    symbol: Optional["StringFilter"] = None
    category: Optional["StringFilter"] = None
    desc: Optional["StringFilter"] = None
    logo: Optional["StringFilter"] = None
    asset_prices: Optional["AssetPriceListRelationFilter"] = Field(
        alias="assetPrices", default=None
    )
    assset_balances: Optional["AssetBalanceListRelationFilter"] = Field(
        alias="asssetBalances", default=None
    )


class AssetBalanceCreateOrConnectWithoutCryptoProfileInput(BaseModel):
    where: "AssetBalanceWhereUniqueInput"
    create: "AssetBalanceCreateWithoutCryptoProfileInput"


class AssetBalanceWhereUniqueInput(BaseModel):
    id: Optional[str] = None
    and_: Optional[List["AssetBalanceWhereInput"]] = Field(alias="AND", default=None)
    or_: Optional[List["AssetBalanceWhereInput"]] = Field(alias="OR", default=None)
    not_: Optional[List["AssetBalanceWhereInput"]] = Field(alias="NOT", default=None)
    crypto_profile_id: Optional["StringFilter"] = Field(
        alias="cryptoProfileId", default=None
    )
    asset_info_id: Optional["StringFilter"] = Field(alias="assetInfoId", default=None)
    balance: Optional["FloatFilter"] = None
    locked: Optional["FloatFilter"] = None
    crypto_profile: Optional["UserCryptoProfileRelationFilter"] = Field(
        alias="cryptoProfile", default=None
    )
    asset_info: Optional["AssetInfoRelationFilter"] = Field(
        alias="assetInfo", default=None
    )


class AssetBalanceCreateManyCryptoProfileInputEnvelope(BaseModel):
    data: List["AssetBalanceCreateManyCryptoProfileInput"]
    skip_duplicates: Optional[bool] = Field(alias="skipDuplicates", default=None)


class AssetBalanceCreateManyCryptoProfileInput(BaseModel):
    id: Optional[str] = None
    asset_info_id: str = Field(alias="assetInfoId")
    balance: float
    locked: float


class HistoricalCryptoBalanceCreateNestedManyWithoutCryptoProfileInput(BaseModel):
    create: Optional[List["HistoricalCryptoBalanceCreateWithoutCryptoProfileInput"]] = (
        None
    )
    connect_or_create: Optional[
        List["HistoricalCryptoBalanceCreateOrConnectWithoutCryptoProfileInput"]
    ] = Field(alias="connectOrCreate", default=None)
    create_many: Optional[
        "HistoricalCryptoBalanceCreateManyCryptoProfileInputEnvelope"
    ] = Field(alias="createMany", default=None)
    connect: Optional[List["HistoricalCryptoBalanceWhereUniqueInput"]] = None


class HistoricalCryptoBalanceCreateWithoutCryptoProfileInput(BaseModel):
    time: Any
    estimated_balance: float = Field(alias="estimatedBalance")
    change_percent: float = Field(alias="changePercent")
    change_balance: float = Field(alias="changeBalance")


class HistoricalCryptoBalanceCreateOrConnectWithoutCryptoProfileInput(BaseModel):
    where: "HistoricalCryptoBalanceWhereUniqueInput"
    create: "HistoricalCryptoBalanceCreateWithoutCryptoProfileInput"


class HistoricalCryptoBalanceWhereUniqueInput(BaseModel):
    crypto_profile_id_time: Optional[
        "HistoricalCryptoBalanceCryptoProfileIdTimeCompoundUniqueInput"
    ] = Field(alias="cryptoProfileId_time", default=None)
    and_: Optional[List["HistoricalCryptoBalanceWhereInput"]] = Field(
        alias="AND", default=None
    )
    or_: Optional[List["HistoricalCryptoBalanceWhereInput"]] = Field(
        alias="OR", default=None
    )
    not_: Optional[List["HistoricalCryptoBalanceWhereInput"]] = Field(
        alias="NOT", default=None
    )
    crypto_profile_id: Optional["StringFilter"] = Field(
        alias="cryptoProfileId", default=None
    )
    time: Optional["DateTimeFilter"] = None
    estimated_balance: Optional["FloatFilter"] = Field(
        alias="estimatedBalance", default=None
    )
    change_percent: Optional["FloatFilter"] = Field(alias="changePercent", default=None)
    change_balance: Optional["FloatFilter"] = Field(alias="changeBalance", default=None)
    crypto_profile: Optional["UserCryptoProfileRelationFilter"] = Field(
        alias="cryptoProfile", default=None
    )


class HistoricalCryptoBalanceCryptoProfileIdTimeCompoundUniqueInput(BaseModel):
    crypto_profile_id: str = Field(alias="cryptoProfileId")
    time: Any


class HistoricalCryptoBalanceCreateManyCryptoProfileInputEnvelope(BaseModel):
    data: List["HistoricalCryptoBalanceCreateManyCryptoProfileInput"]
    skip_duplicates: Optional[bool] = Field(alias="skipDuplicates", default=None)


class HistoricalCryptoBalanceCreateManyCryptoProfileInput(BaseModel):
    time: Any
    estimated_balance: float = Field(alias="estimatedBalance")
    change_percent: float = Field(alias="changePercent")
    change_balance: float = Field(alias="changeBalance")


class UserCryptoProfileCreateOrConnectWithoutUserInput(BaseModel):
    where: "UserCryptoProfileWhereUniqueInput"
    create: "UserCryptoProfileCreateWithoutUserInput"


class UserCryptoProfileWhereUniqueInput(BaseModel):
    profile_id: Optional[str] = Field(alias="profileId", default=None)
    and_: Optional[List["UserCryptoProfileWhereInput"]] = Field(
        alias="AND", default=None
    )
    or_: Optional[List["UserCryptoProfileWhereInput"]] = Field(alias="OR", default=None)
    not_: Optional[List["UserCryptoProfileWhereInput"]] = Field(
        alias="NOT", default=None
    )
    user_id: Optional["IntFilter"] = Field(alias="userId", default=None)
    exchanges: Optional["StringFilter"] = None
    trading_type: Optional["EnumTradingTypeFilter"] = Field(
        alias="tradingType", default=None
    )
    api_key: Optional["StringFilter"] = Field(alias="apiKey", default=None)
    secret_key: Optional["StringFilter"] = Field(alias="secretKey", default=None)
    user: Optional["UserRelationFilter"] = None
    balances: Optional["AssetBalanceListRelationFilter"] = None
    historical_balances: Optional["HistoricalCryptoBalanceListRelationFilter"] = Field(
        alias="historicalBalances", default=None
    )


class UserCryptoProfileCreateManyUserInputEnvelope(BaseModel):
    data: List["UserCryptoProfileCreateManyUserInput"]
    skip_duplicates: Optional[bool] = Field(alias="skipDuplicates", default=None)


class UserCryptoProfileCreateManyUserInput(BaseModel):
    profile_id: Optional[str] = Field(alias="profileId", default=None)
    exchanges: Optional[str] = None
    trading_type: TradingType = Field(alias="tradingType")
    api_key: str = Field(alias="apiKey")
    secret_key: str = Field(alias="secretKey")


class VerifyDto(BaseModel):
    otp: str
    otp_purpose: OtpPurpose = Field(alias="otpPurpose")


UserCreateInput.model_rebuild()
UserCryptoProfileCreateNestedManyWithoutUserInput.model_rebuild()
UserCryptoProfileCreateWithoutUserInput.model_rebuild()
AssetBalanceCreateNestedManyWithoutCryptoProfileInput.model_rebuild()
AssetBalanceCreateWithoutCryptoProfileInput.model_rebuild()
AssetInfoCreateNestedOneWithoutAsssetBalancesInput.model_rebuild()
AssetInfoCreateWithoutAsssetBalancesInput.model_rebuild()
AssetPriceCreateNestedManyWithoutAssetInfoInput.model_rebuild()
AssetPriceCreateOrConnectWithoutAssetInfoInput.model_rebuild()
AssetPriceWhereUniqueInput.model_rebuild()
AssetPriceWhereInput.model_rebuild()
StringFilter.model_rebuild()
NestedStringFilter.model_rebuild()
DateTimeFilter.model_rebuild()
NestedDateTimeFilter.model_rebuild()
FloatFilter.model_rebuild()
NestedFloatFilter.model_rebuild()
AssetInfoRelationFilter.model_rebuild()
AssetInfoWhereInput.model_rebuild()
AssetPriceListRelationFilter.model_rebuild()
AssetBalanceListRelationFilter.model_rebuild()
AssetBalanceWhereInput.model_rebuild()
UserCryptoProfileRelationFilter.model_rebuild()
UserCryptoProfileWhereInput.model_rebuild()
IntFilter.model_rebuild()
NestedIntFilter.model_rebuild()
EnumTradingTypeFilter.model_rebuild()
NestedEnumTradingTypeFilter.model_rebuild()
UserRelationFilter.model_rebuild()
UserWhereInput.model_rebuild()
StringNullableFilter.model_rebuild()
NestedStringNullableFilter.model_rebuild()
EnumOtpPurposeNullableFilter.model_rebuild()
NestedEnumOtpPurposeNullableFilter.model_rebuild()
UserCryptoProfileListRelationFilter.model_rebuild()
HistoricalCryptoBalanceListRelationFilter.model_rebuild()
HistoricalCryptoBalanceWhereInput.model_rebuild()
AssetPriceCreateManyAssetInfoInputEnvelope.model_rebuild()
AssetInfoCreateOrConnectWithoutAsssetBalancesInput.model_rebuild()
AssetInfoWhereUniqueInput.model_rebuild()
AssetBalanceCreateOrConnectWithoutCryptoProfileInput.model_rebuild()
AssetBalanceWhereUniqueInput.model_rebuild()
AssetBalanceCreateManyCryptoProfileInputEnvelope.model_rebuild()
HistoricalCryptoBalanceCreateNestedManyWithoutCryptoProfileInput.model_rebuild()
HistoricalCryptoBalanceCreateOrConnectWithoutCryptoProfileInput.model_rebuild()
HistoricalCryptoBalanceWhereUniqueInput.model_rebuild()
HistoricalCryptoBalanceCreateManyCryptoProfileInputEnvelope.model_rebuild()
UserCryptoProfileCreateOrConnectWithoutUserInput.model_rebuild()
UserCryptoProfileWhereUniqueInput.model_rebuild()
UserCryptoProfileCreateManyUserInputEnvelope.model_rebuild()
