# Generated by ariadne-codegen
# Source: ./gql/query.gql

from typing import Any, Dict

from .async_base_client import AsyncBaseClient
from .get_crypto_profile import GetCryptoProfile
from .get_me import GetMe
from .input_types import GetCryptoProfileInput, LoginReqDto, UserCreateInput, VerifyDto
from .login import Login
from .signup import Signup
from .verify_account import VerifyAccount


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def signup(self, data: UserCreateInput, **kwargs: Any) -> Signup:
        query = gql(
            """
            mutation Signup($data: UserCreateInput!) {
              signup(data: $data) {
                accessToken
                refreshToken
              }
            }
            """
        )
        variables: Dict[str, object] = {"data": data}
        response = await self.execute(
            query=query, operation_name="Signup", variables=variables, **kwargs
        )
        _data = self.get_data(response)
        return Signup.model_validate(_data)

    async def login(self, data: LoginReqDto, **kwargs: Any) -> Login:
        query = gql(
            """
            mutation Login($data: LoginReqDto!) {
              login(data: $data) {
                accessToken
              }
            }
            """
        )
        variables: Dict[str, object] = {"data": data}
        response = await self.execute(
            query=query, operation_name="Login", variables=variables, **kwargs
        )
        _data = self.get_data(response)
        return Login.model_validate(_data)

    async def verify_account(self, data: VerifyDto, **kwargs: Any) -> VerifyAccount:
        query = gql(
            """
            mutation VerifyAccount($data: VerifyDto!) {
              verifyAccount(data: $data) {
                accessToken
              }
            }
            """
        )
        variables: Dict[str, object] = {"data": data}
        response = await self.execute(
            query=query, operation_name="VerifyAccount", variables=variables, **kwargs
        )
        _data = self.get_data(response)
        return VerifyAccount.model_validate(_data)

    async def get_me(self, **kwargs: Any) -> GetMe:
        query = gql(
            """
            query GetMe {
              getMe {
                email
                id
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="GetMe", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetMe.model_validate(data)

    async def get_crypto_profile(
        self, data: GetCryptoProfileInput, **kwargs: Any
    ) -> GetCryptoProfile:
        query = gql(
            """
            query GetCryptoProfile($data: GetCryptoProfileInput!) {
              getCryptoProfiles(data: $data) {
                profileId
                tradingType
                exchanges
                estimatedBalance
                balances {
                  balance
                  assetInfo {
                    symbol
                    logo
                    lastPrice
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"data": data}
        response = await self.execute(
            query=query,
            operation_name="GetCryptoProfile",
            variables=variables,
            **kwargs
        )
        _data = self.get_data(response)
        return GetCryptoProfile.model_validate(_data)
